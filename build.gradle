plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.graalvm.buildtools.native' version '0.10.6'
	id 'org.asciidoctor.jvm.convert' version '4.0.3'
	id 'org.openrewrite.rewrite' version '7.9.0'
}

group = 'org.sc.ai'
version = '0.0.1-SNAPSHOT'
description = 'sc cli - simple ai for everyday people'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(22)
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springAiVersion', "1.0.0")
    set('scVersion', project.version)
    set('picocliVersion', "4.7.7")
    set('jlineVersion', "3.30.0")
}

configurations {
    generateConfig
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation('org.springframework.ai:spring-ai-starter-model-ollama') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-webflux'
    }
	implementation 'org.springframework.ai:spring-ai-starter-model-chat-memory-repository-jdbc'
	implementation 'org.springframework.ai:spring-ai-pdf-document-reader'
	implementation 'org.springframework.ai:spring-ai-markdown-document-reader'
	implementation 'org.springframework.ai:spring-ai-jsoup-document-reader'
	implementation "org.jline:jline:${jlineVersion}"
	implementation "org.jline:jline-terminal-ffm:${jlineVersion}"
	implementation "org.jline:jline-terminal-jni:${jlineVersion}"
    implementation "info.picocli:picocli-spring-boot-starter:${picocliVersion}"
	implementation "info.picocli:picocli-shell-jline3:${picocliVersion}"
	annotationProcessor "info.picocli:picocli-codegen:${picocliVersion}"
    generateConfig "info.picocli:picocli-codegen:${picocliVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.ai:spring-ai-spring-boot-testcontainers'
	testImplementation 'org.testcontainers:ollama:1.21.0'
    implementation 'org.awaitility:awaitility'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    
    // OpenRewrite dependencies
    rewrite 'org.openrewrite:rewrite-java:8.56.0'
    rewrite 'org.openrewrite.recipe:rewrite-spring:6.9.0'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

springBoot {
    buildInfo {
		properties {
			additional = [
				'description' : project.getDescription(),
			]
		}
	}
}

compileJava {
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

task generateManpageAsciiDoc(type: JavaExec) {
    dependsOn(classes)
    group = "Documentation"
    description = "Generate AsciiDoc manpage"
    classpath = configurations.generateConfig + sourceSets.main.runtimeClasspath
    mainClass = 'picocli.codegen.docgen.manpage.ManPageGenerator'
    args 'org.sc.ai.cli.command.DocumentationTopCommand', "--outdir=${project.buildDir}/generated-picocli-docs", "-v"
}

task generateManpageTemplates(type: JavaExec) {
    dependsOn(classes)
    group = "Documentation"
    description = "Generate AsciiDoc manpage templates (run only once to create templates)"
    classpath = configurations.generateConfig + sourceSets.main.runtimeClasspath
    mainClass = 'picocli.codegen.docgen.manpage.ManPageGenerator'
    args 'org.sc.ai.cli.command.DocumentationTopCommand', 
         "--outdir=${project.buildDir}/generated-picocli-docs", 
         "--template-dir=src/docs/man-templates",
         "--force",
         "-v"
}

task generateEnhancedDocs(type: JavaExec) {
    dependsOn(classes)
    group = "Documentation"
    description = "Generate documentation using templates (if they exist) or standard generation"
    classpath = configurations.generateConfig + sourceSets.main.runtimeClasspath
    mainClass = 'picocli.codegen.docgen.manpage.ManPageGenerator'
    
    doFirst {
        def templatesDir = file("src/docs/man-templates")
        if (templatesDir.exists() && templatesDir.listFiles().length > 0) {
            println "Using existing templates from: ${templatesDir}"
            args 'org.sc.ai.cli.command.DocumentationTopCommand', 
                 "--outdir=${project.buildDir}/generated-picocli-docs", 
                 "-v"
        } else {
            println "No templates found, using standard generation"
            args 'org.sc.ai.cli.command.DocumentationTopCommand', 
                 "--outdir=${project.buildDir}/generated-picocli-docs", 
                 "-v"
        }
    }
}

asciidoctor {
    dependsOn(generateEnhancedDocs)
    
    // Determine source directory based on whether templates exist
    def templatesDir = file("src/docs/man-templates")
    if (templatesDir.exists() && templatesDir.listFiles().length > 0) {
        sourceDir = templatesDir
        println "Using templates from: ${templatesDir}"
    } else {
        sourceDir = file("${project.buildDir}/generated-picocli-docs")
        println "Using generated docs from: ${project.buildDir}/generated-picocli-docs"
    }
    
    outputDir = file("${project.buildDir}/docs")
    logDocuments = true
    outputOptions {
        backends = ['html5']
    }
    attributes = [
        'source-highlighter': 'coderay',
        'icons': 'font',
        'includedir': "${project.buildDir}/generated-picocli-docs"
    ]
}

task generateDocs {
    dependsOn(asciidoctor)
    group = "Documentation"
    description = "Generate all documentation (AsciiDoc man pages converted to HTML)"
    doLast {
        // Copy schema files to docs directory
        mkdir("${project.buildDir}/docs/schemas")
        copy {
            from ".sc/schema.json"
            into "${project.buildDir}/docs/schemas"
        }
        
        println "Documentation generated in: ${project.buildDir}/docs"
        println "Available files:"
        file("${project.buildDir}/docs").listFiles().each { file ->
            if (file.name.endsWith('.html')) {
                println "  - ${file.name}"
            }
        }
        println "Schema files:"
        file("${project.buildDir}/docs/schemas").listFiles().each { file ->
            println "  - schemas/${file.name}"
        }
    }
}

graalvmNative {
    binaries {
        main {
            imageName = 'sc'
            buildArgs.add('--verbose')
        }
    }
    metadataRepository {
        enabled = true
    }
}

rewrite {
    activeRecipe 'com.simplecommerce.ai.commerce.PackageMigrationRecipe'
    configFile = file('rewrite.yml')
}

task migratePackages {
    dependsOn 'rewriteRun'
    group = "Migration"
    description = "Migrate package structure from org.simplecommerce.ai.commerce to org.sc.ai.cli"
    doLast {
        println "Package migration completed!"
        println "Please review the changes and run './gradlew clean build' to verify everything works correctly."
    }
}

task previewPackageMigration {
    dependsOn 'rewriteDryRun'
    group = "Migration"
    description = "Preview package migration changes without applying them"
    doLast {
        println "Migration preview completed!"
        println "Review the output above to see what changes would be made."
        println "Run './gradlew migratePackages' to apply the changes."
    }
}
